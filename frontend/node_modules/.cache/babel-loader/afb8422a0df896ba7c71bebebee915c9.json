{"ast":null,"code":"var _jsxFileName = \"/Users/thapasya/home/practice/testing/snake-game-react/src/components/SnakeGame.js\";\nimport React, { Component } from 'react';\n\nclass SnakeGame extends Component {\n  constructor(props) {\n    super(props);\n\n    this.directionKeyPressed = e => {\n      const key = this.state.key;\n      let _nextDirection = {};\n      const keyPressed = e.keyCode;\n\n      switch (keyPressed) {\n        case key.left:\n          _nextDirection = {\n            x: -10,\n            y: 0\n          };\n\n          if (this.isNextStepAllowed(_nextDirection)) {\n            this.setState({\n              currentDirection: _nextDirection\n            });\n          }\n\n          break;\n\n        case key.up:\n          _nextDirection = {\n            x: 0,\n            y: -10\n          };\n\n          if (this.isNextStepAllowed(_nextDirection)) {\n            this.setState({\n              currentDirection: _nextDirection\n            });\n          }\n\n          break;\n\n        case key.right:\n          _nextDirection = {\n            x: 10,\n            y: 0\n          };\n\n          if (this.isNextStepAllowed(_nextDirection)) {\n            this.setState({\n              currentDirection: _nextDirection\n            });\n          }\n\n          break;\n\n        case key.down:\n          _nextDirection = {\n            x: 0,\n            y: 10\n          };\n\n          if (this.isNextStepAllowed(_nextDirection)) {\n            this.setState({\n              currentDirection: _nextDirection\n            });\n          }\n\n          break;\n      }\n    };\n\n    this.state = {\n      canvasWidth: 300,\n      canvasHeight: 300,\n      key: {\n        left: 37,\n        up: 38,\n        right: 39,\n        down: 40\n      },\n      snake: [{\n        x: 150,\n        y: 150\n      }, {\n        x: 140,\n        y: 150\n      }, {\n        x: 130,\n        y: 150\n      }, {\n        x: 120,\n        y: 150\n      }],\n      currentDirection: {\n        x: -10,\n        y: 0\n      },\n      context: \"\",\n      canvas: \"\",\n      frogPosition: {\n        x: 0,\n        y: 0\n      },\n      score: 0\n    };\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.directionKeyPressed);\n    const canvas = document.getElementById(\"snake_board\");\n    const context = canvas.getContext(\"2d\");\n    this.setState({\n      context: context,\n      canvas: canvas\n    });\n    this.createFrog();\n    this.movingSlow();\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.directionKeyPressed);\n  }\n\n  isNextStepAllowed(_nextDirection) {\n    const previousDirection = this.state.currentDirection;\n\n    if (Math.abs(previousDirection.x) === Math.abs(_nextDirection.x)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  movingSlow() {\n    const _this$state = this.state,\n          currentDirection = _this$state.currentDirection,\n          frogPosition = _this$state.frogPosition;\n    setTimeout(() => {\n      this.clearCanvas();\n      this.justDraw(frogPosition, \"green\");\n\n      if (!this.didSnakeDie()) {\n        this.moveSnake(currentDirection);\n        this.drawSnake();\n        this.movingSlow();\n      } else {\n        this.drawSnake();\n\n        if (window.confirm(\"You lost with \" + this.state.score + \" point(s). Click ok to restart.\")) {\n          window.location.reload();\n        }\n      }\n    }, 300);\n  }\n\n  drawSnake() {\n    const snake = this.state.snake;\n\n    for (let i = 0; i < snake.length; i++) {\n      this.justDraw(snake[i], \"red\");\n    }\n\n    this.drawBoard();\n  }\n\n  clearCanvas() {\n    const _this$state2 = this.state,\n          canvasWidth = _this$state2.canvasWidth,\n          canvasHeight = _this$state2.canvasHeight,\n          context = _this$state2.context;\n\n    if (context !== \"\") {\n      context.fillStyle = \"white\";\n      context.strokeStyle = \"black\";\n      context.fillRect(0, 0, canvasWidth, canvasHeight);\n      context.strokeRect(0, 0, canvasWidth, canvasHeight);\n    }\n  }\n\n  didSnakeDie() {\n    const snake = this.state.snake;\n    const head = {\n      x: snake[0].x,\n      y: snake[0].y\n    };\n\n    for (let i = 4; i < snake.length; i++) {\n      if (snake[i].x === head.x && snake[i].y === head.y) {\n        return true;\n      }\n    } // if (didSnakeHitWall(head)) {\n    //   return true\n    // }\n\n\n    return false;\n  }\n\n  didSnakeHitWall(coords) {\n    const _this$state3 = this.state,\n          canvasHeight = _this$state3.canvasHeight,\n          canvasWidth = _this$state3.canvasWidth;\n\n    if (coords.x === 0 || coords.x === canvasWidth - 10 || coords.y === 0 || coords.y === canvasHeight - 10) {\n      return true;\n    }\n  }\n\n  getPosition(val, mod) {\n    return (val % mod + mod) % mod;\n  }\n\n  moveSnake(headTo) {\n    const _this$state4 = this.state,\n          snake = _this$state4.snake,\n          frogPosition = _this$state4.frogPosition,\n          canvasHeight = _this$state4.canvasHeight,\n          canvasWidth = _this$state4.canvasWidth;\n    const head = {\n      x: this.getPosition(snake[0].x + headTo.x, canvasWidth),\n      y: this.getPosition(snake[0].y + headTo.y, canvasHeight)\n    };\n    snake.unshift(head);\n\n    if (head.x === frogPosition.x && head.y === frogPosition.y) {\n      this.gainPoint();\n      this.createFrog();\n    } else snake.pop();\n  }\n\n  gainPoint() {\n    this.setState({\n      score: this.state.score + 1\n    });\n  }\n\n  createFrog() {\n    const _this$state5 = this.state,\n          frogPosition = _this$state5.frogPosition,\n          snake = _this$state5.snake,\n          canvasWidth = _this$state5.canvasWidth,\n          canvasHeight = _this$state5.canvasHeight;\n    frogPosition.x = Math.round(Math.random() * (canvasWidth - 10) / 10) * 10;\n    frogPosition.y = Math.round(Math.random() * (canvasHeight - 10) / 10) * 10;\n    snake.forEach(function didSnakeEatFood(part) {\n      const isFrogEaten = part.x === frogPosition.x && part.y === frogPosition.y;\n\n      if (isFrogEaten) {\n        console.log(\"ate\");\n        this.createFrog();\n      }\n    });\n    this.justDraw(frogPosition, \"green\");\n    this.drawBoard();\n  }\n\n  drawBoard() {\n    const canvas = document.getElementById(\"snake_board\"),\n          _this$state6 = this.state,\n          canvasWidth = _this$state6.canvasWidth,\n          canvasHeight = _this$state6.canvasHeight,\n          p = 0;\n    const context = canvas.getContext(\"2d\");\n\n    for (var x = 0; x <= canvasWidth; x += 10) {\n      context.moveTo(0.5 + x + p, p);\n      context.lineTo(0.5 + x + p, canvasHeight + p);\n    }\n\n    for (var y = 0; y <= canvasHeight; y += 10) {\n      context.moveTo(p, 0.5 + y + p);\n      context.lineTo(canvasWidth + p, 0.5 + y + p);\n    }\n\n    context.strokeStyle = \"grey\";\n    context.stroke();\n  }\n\n  justDraw(coords, fillColor) {\n    const canvas = this.state.canvas;\n\n    if (canvas.getContext) {\n      const context = canvas.getContext(\"2d\");\n      context.fillStyle = fillColor;\n      context.fillRect(coords.x, coords.y, 10, 10);\n      context.strokeRect(coords.x, coords.y, 10, 10);\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      style: {\n        border: \"1px solid black\"\n      },\n      id: \"snake_board\",\n      width: \"300\",\n      height: \"300\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }), React.createElement(\"aside\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, \"Score: \", this.state.score));\n  }\n\n}\n\nexport default SnakeGame;","map":{"version":3,"sources":["/Users/thapasya/home/practice/testing/snake-game-react/src/components/SnakeGame.js"],"names":["React","Component","SnakeGame","constructor","props","directionKeyPressed","e","key","state","_nextDirection","keyPressed","keyCode","left","x","y","isNextStepAllowed","setState","currentDirection","up","right","down","canvasWidth","canvasHeight","snake","context","canvas","frogPosition","score","componentDidMount","document","addEventListener","getElementById","getContext","createFrog","movingSlow","componentWillUnmount","removeEventListener","previousDirection","Math","abs","setTimeout","clearCanvas","justDraw","didSnakeDie","moveSnake","drawSnake","window","confirm","location","reload","i","length","drawBoard","fillStyle","strokeStyle","fillRect","strokeRect","head","didSnakeHitWall","coords","getPosition","val","mod","headTo","unshift","gainPoint","pop","round","random","forEach","didSnakeEatFood","part","isFrogEaten","console","log","p","moveTo","lineTo","stroke","fillColor","render","border"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nclass SnakeGame extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            canvasWidth: 300,\n            canvasHeight: 300,\n            key: {\n                left: 37,\n                up: 38,\n                right: 39,\n                down: 40\n            },\n            snake: [\n                { x: 150, y: 150 },\n                { x: 140, y: 150 },\n                { x: 130, y: 150 },\n                { x: 120, y: 150 }\n            ],\n            currentDirection: {\n                x: -10,\n                y: 0\n            },\n            context: \"\",\n            canvas: \"\",\n            frogPosition: {\n                x: 0,\n                y: 0\n            },\n            score: 0\n        }\n    }\n    componentDidMount() {\n        document.addEventListener(\"keydown\", this.directionKeyPressed)\n        const canvas = document.getElementById(\"snake_board\")\n        const context = canvas.getContext(\"2d\")\n        this.setState({\n            context: context,\n            canvas: canvas\n        })\n        this.createFrog();\n        this.movingSlow();\n    }\n    componentWillUnmount() {\n        document.removeEventListener(\"keydown\", this.directionKeyPressed)\n    }\n    isNextStepAllowed(_nextDirection) {\n        const previousDirection = this.state.currentDirection\n        if (Math.abs(previousDirection.x) === Math.abs(_nextDirection.x)) {\n            return false\n        }\n        return true\n    }\n    directionKeyPressed = (e) => {\n        const { key } = this.state\n        let _nextDirection = {}\n        const keyPressed = e.keyCode\n        switch (keyPressed) {\n            case key.left:\n                _nextDirection = { x: -10, y: 0 }\n                if (this.isNextStepAllowed(_nextDirection)) {\n                    this.setState({ currentDirection: _nextDirection })\n                }\n                break;\n            case key.up:\n                _nextDirection = { x: 0, y: -10 }\n                if (this.isNextStepAllowed(_nextDirection)) {\n                    this.setState({ currentDirection: _nextDirection })\n                }\n                break;\n            case key.right:\n                _nextDirection = { x: 10, y: 0 }\n                if (this.isNextStepAllowed(_nextDirection)) {\n                    this.setState({ currentDirection: _nextDirection })\n                }\n                break;\n            case key.down:\n                _nextDirection = { x: 0, y: 10 }\n                if (this.isNextStepAllowed(_nextDirection)) {\n                    this.setState({ currentDirection: _nextDirection })\n                }\n                break;\n        }\n    }\n    movingSlow() {\n        const { currentDirection, frogPosition } = this.state;\n        setTimeout(() => {\n            this.clearCanvas();\n            this.justDraw(frogPosition, \"green\");\n            if (!this.didSnakeDie()) {\n                this.moveSnake(currentDirection);\n                this.drawSnake();\n                this.movingSlow()\n            } else {\n                this.drawSnake();\n                if (window.confirm(\"You lost with \" + this.state.score + \" point(s). Click ok to restart.\")) {\n                    window.location.reload()\n                }\n            }\n\n        }, 300);\n    }\n    drawSnake() {\n        const { snake } = this.state\n        for (let i = 0; i < snake.length; i++) {\n            this.justDraw(snake[i], \"red\")\n        }\n        this.drawBoard();\n    }\n    clearCanvas() {\n        const { canvasWidth, canvasHeight, context } = this.state\n\n        if (context !== \"\") {\n            context.fillStyle = \"white\";\n            context.strokeStyle = \"black\";\n            context.fillRect(0, 0, canvasWidth, canvasHeight);\n            context.strokeRect(0, 0, canvasWidth, canvasHeight);\n        }\n    }\n    didSnakeDie() {\n        const { snake } = this.state\n        const head = { x: snake[0].x, y: snake[0].y }\n        for (let i = 4; i < snake.length; i++) {\n            if (snake[i].x === head.x && snake[i].y === head.y) {\n                return true\n            }\n        }\n        // if (didSnakeHitWall(head)) {\n        //   return true\n        // }\n\n        return false\n    }\n    didSnakeHitWall(coords) {\n        const { canvasHeight, canvasWidth } = this.state\n        if (coords.x === 0 || coords.x === canvasWidth - 10\n            || coords.y === 0 || coords.y === canvasHeight - 10) {\n            return true\n        }\n    }\n    getPosition(val, mod) {\n        return ((val % mod) + mod) % mod;\n    }\n    moveSnake(headTo) {\n        const { snake, frogPosition, canvasHeight, canvasWidth } = this.state;\n        const head = {\n            x: this.getPosition(snake[0].x + headTo.x, canvasWidth),\n            y: this.getPosition(snake[0].y + headTo.y, canvasHeight)\n        }\n        snake.unshift(head);\n        if (head.x === frogPosition.x && head.y === frogPosition.y) {\n            this.gainPoint()\n            this.createFrog();\n        }\n        else\n            snake.pop();\n    }\n    gainPoint() {\n        this.setState({\n            score: this.state.score + 1\n        })\n    }\n    createFrog() {\n        const { frogPosition, snake, canvasWidth, canvasHeight } = this.state\n\n        frogPosition.x = Math.round((Math.random() * (canvasWidth - 10)) / 10) * 10;\n        frogPosition.y = Math.round((Math.random() * (canvasHeight - 10)) / 10) * 10;\n\n        snake.forEach(function didSnakeEatFood(part) {\n            const isFrogEaten = part.x === frogPosition.x && part.y ===\n                frogPosition.y\n            if (isFrogEaten) {\n                console.log(\"ate\")\n                this.createFrog();\n            }\n        })\n        this.justDraw(frogPosition, \"green\");\n        this.drawBoard();\n    }\n    drawBoard() {\n        const canvas = document.getElementById(\"snake_board\"),\n            { canvasWidth, canvasHeight } = this.state,\n            p = 0\n\n        const context = canvas.getContext(\"2d\");\n        for (var x = 0; x <= canvasWidth; x += 10) {\n            context.moveTo(0.5 + x + p, p);\n            context.lineTo(0.5 + x + p, canvasHeight + p);\n        }\n\n        for (var y = 0; y <= canvasHeight; y += 10) {\n            context.moveTo(p, 0.5 + y + p);\n            context.lineTo(canvasWidth + p, 0.5 + y + p);\n        }\n        context.strokeStyle = \"grey\";\n        context.stroke();\n    }\n\n    justDraw(coords, fillColor) {\n        const { canvas } = this.state;\n        if (canvas.getContext) {\n            const context = canvas.getContext(\"2d\")\n            context.fillStyle = fillColor\n            context.fillRect(coords.x, coords.y, 10, 10)\n            context.strokeRect(coords.x, coords.y, 10, 10)\n        }\n    }\n    render() {\n        return (\n            <div className=\"App\">\n                <canvas\n                    style={{ border: \"1px solid black\" }}\n                    id=\"snake_board\" width=\"300\" height=\"300\">\n                </canvas>\n                <aside>Score: {this.state.score}</aside>\n            </div>\n        );\n    }\n\n}\n\nexport default SnakeGame;\n"]},"metadata":{},"sourceType":"module"}