{"ast":null,"code":"var _jsxFileName = \"/Users/thapasya/home/practice/testing/snake-game-react/src/App.js\";\nimport React, { Component } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport './App.css';\nimport SnakeGame from './components/SnakeGame';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {// canvasWidth: 300,\n      // canvasHeight: 300,\n      // key: {\n      //   left: 37,\n      //   up: 38,\n      //   right: 39,\n      //   down: 40\n      // },\n      // snake: [\n      //   { x: 150, y: 150 },\n      //   { x: 140, y: 150 },\n      //   { x: 130, y: 150 },\n      //   { x: 120, y: 150 }\n      // ],\n      // currentDirection: {\n      //   x: -10,\n      //   y: 0\n      // },\n      // context: \"\",\n      // canvas: \"\",\n      // frogPosition: {\n      //   x: 0,\n      //   y: 0\n      // },\n      // score: 0\n    };\n  } // componentDidMount() {\n  //   document.addEventListener(\"keydown\", this.directionKeyPressed)\n  //   const canvas = document.getElementById(\"snake_board\")\n  //   const context = canvas.getContext(\"2d\")\n  //   this.setState({\n  //     context: context,\n  //     canvas: canvas\n  //   })\n  //   this.createFrog();\n  //   this.movingSlow();\n  // }\n  // componentWillUnmount() {\n  //   document.removeEventListener(\"keydown\", this.directionKeyPressed)\n  // }\n  // isNextStepAllowed(_nextDirection) {\n  //   const previousDirection = this.state.currentDirection\n  //   if (Math.abs(previousDirection.x) === Math.abs(_nextDirection.x)) {\n  //     return false\n  //   }\n  //   return true\n  // }\n  // directionKeyPressed = (e) => {\n  //   const { key } = this.state\n  //   let _nextDirection = {}\n  //   const keyPressed = e.keyCode\n  //   switch (keyPressed) {\n  //     case key.left:\n  //       _nextDirection = { x: -10, y: 0 }\n  //       if (this.isNextStepAllowed(_nextDirection)) {\n  //         this.setState({ currentDirection: _nextDirection })\n  //       }\n  //       break;\n  //     case key.up:\n  //       _nextDirection = { x: 0, y: -10 }\n  //       if (this.isNextStepAllowed(_nextDirection)) {\n  //         this.setState({ currentDirection: _nextDirection })\n  //       }\n  //       break;\n  //     case key.right:\n  //       _nextDirection = { x: 10, y: 0 }\n  //       if (this.isNextStepAllowed(_nextDirection)) {\n  //         this.setState({ currentDirection: _nextDirection })\n  //       }\n  //       break;\n  //     case key.down:\n  //       _nextDirection = { x: 0, y: 10 }\n  //       if (this.isNextStepAllowed(_nextDirection)) {\n  //         this.setState({ currentDirection: _nextDirection })\n  //       }\n  //       break;\n  //   }\n  // }\n  // movingSlow() {\n  //   const { currentDirection, frogPosition } = this.state;\n  //   setTimeout(() => {\n  //     this.clearCanvas();\n  //     this.justDraw(frogPosition, \"green\");\n  //     if (!this.didSnakeDie()) {\n  //       this.moveSnake(currentDirection);\n  //       this.drawSnake();\n  //       this.movingSlow()\n  //     } else {\n  //       this.drawSnake();\n  //       if (window.confirm(\"You lost with \" + this.state.score + \" point(s). Click ok to restart.\")) {\n  //         window.location.reload()\n  //       }\n  //     }\n  //   }, 300);\n  // }\n  // drawSnake() {\n  //   const { snake } = this.state\n  //   for (let i = 0; i < snake.length; i++) {\n  //     this.justDraw(snake[i], \"red\")\n  //   }\n  //   this.drawBoard();\n  // }\n  // clearCanvas() {\n  //   const { canvasWidth, canvasHeight, context } = this.state\n  //   if (context !== \"\") {\n  //     context.fillStyle = \"white\";\n  //     context.strokeStyle = \"black\";\n  //     context.fillRect(0, 0, canvasWidth, canvasHeight);\n  //     context.strokeRect(0, 0, canvasWidth, canvasHeight);\n  //   }\n  // }\n  // didSnakeDie() {\n  //   const { snake } = this.state\n  //   const head = { x: snake[0].x, y: snake[0].y }\n  //   for (let i = 4; i < snake.length; i++) {\n  //     if (snake[i].x === head.x && snake[i].y === head.y) {\n  //       return true\n  //     }\n  //   }\n  //   // if (didSnakeHitWall(head)) {\n  //   //   return true\n  //   // }\n  //   return false\n  // }\n  // didSnakeHitWall(coords) {\n  //   const { canvasHeight, canvasWidth } = this.state\n  //   if (coords.x === 0 || coords.x === canvasWidth - 10\n  //     || coords.y === 0 || coords.y === canvasHeight - 10) {\n  //     return true\n  //   }\n  // }\n  // getPosition(val, mod) {\n  //   return ((val % mod) + mod) % mod;\n  // }\n  // moveSnake(headTo) {\n  //   const { snake, frogPosition, canvasHeight, canvasWidth } = this.state;\n  //   const head = {\n  //     x: this.getPosition(snake[0].x + headTo.x, canvasWidth),\n  //     y: this.getPosition(snake[0].y + headTo.y, canvasHeight)\n  //   }\n  //   snake.unshift(head);\n  //   if (head.x === frogPosition.x && head.y === frogPosition.y) {\n  //     this.gainPoint()\n  //     this.createFrog();\n  //   }\n  //   else\n  //     snake.pop();\n  // }\n  // gainPoint() {\n  //   this.setState({\n  //     score: this.state.score + 1\n  //   })\n  // }\n  // createFrog() {\n  //   const { frogPosition, snake, canvasWidth, canvasHeight } = this.state\n  //   frogPosition.x = Math.round((Math.random() * (canvasWidth - 10)) / 10) * 10;\n  //   frogPosition.y = Math.round((Math.random() * (canvasHeight - 10)) / 10) * 10;\n  //   snake.forEach(function didSnakeEatFood(part) {\n  //     const isFrogEaten = part.x === frogPosition.x && part.y ===\n  //       frogPosition.y\n  //     if (isFrogEaten) {\n  //       console.log(\"ate\")\n  //       this.createFrog();\n  //     }\n  //   })\n  //   this.justDraw(frogPosition, \"green\");\n  //   this.drawBoard();\n  // }\n  // drawBoard() {\n  //   const canvas = document.getElementById(\"snake_board\"),\n  //     { canvasWidth, canvasHeight } = this.state,\n  //     p = 0\n  //   const context = canvas.getContext(\"2d\");\n  //   for (var x = 0; x <= canvasWidth; x += 10) {\n  //     context.moveTo(0.5 + x + p, p);\n  //     context.lineTo(0.5 + x + p, canvasHeight + p);\n  //   }\n  //   for (var y = 0; y <= canvasHeight; y += 10) {\n  //     context.moveTo(p, 0.5 + y + p);\n  //     context.lineTo(canvasWidth + p, 0.5 + y + p);\n  //   }\n  //   context.strokeStyle = \"grey\";\n  //   context.stroke();\n  // }\n  // justDraw(coords, fillColor) {\n  //   const { canvas } = this.state;\n  //   if (canvas.getContext) {\n  //     const context = canvas.getContext(\"2d\")\n  //     context.fillStyle = fillColor\n  //     context.fillRect(coords.x, coords.y, 10, 10)\n  //     context.strokeRect(coords.x, coords.y, 10, 10)\n  //   }\n  // }\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, \"Snake game\"), React.createElement(SnakeGame, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/thapasya/home/practice/testing/snake-game-react/src/App.js"],"names":["React","Component","BrowserRouter","SnakeGame","App","constructor","props","state","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,OAAO,WAAP;AACA,OAAOC,SAAP,MAAsB,wBAAtB;;AAEA,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;AAC1BI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa,CACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBW,KAAb;AA2BD,GA9Byf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAQ,MAAA,SAAS,EAAC,EAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAIE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CAFF;AAcD;;AA7NyB;;AAiO5B,eAAeJ,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport { BrowserRouter } from 'react-router-dom'\nimport './App.css';\nimport SnakeGame from './components/SnakeGame'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      // canvasWidth: 300,\n      // canvasHeight: 300,\n      // key: {\n      //   left: 37,\n      //   up: 38,\n      //   right: 39,\n      //   down: 40\n      // },\n      // snake: [\n      //   { x: 150, y: 150 },\n      //   { x: 140, y: 150 },\n      //   { x: 130, y: 150 },\n      //   { x: 120, y: 150 }\n      // ],\n      // currentDirection: {\n      //   x: -10,\n      //   y: 0\n      // },\n      // context: \"\",\n      // canvas: \"\",\n      // frogPosition: {\n      //   x: 0,\n      //   y: 0\n      // },\n      // score: 0\n    }\n  }\n  // componentDidMount() {\n  //   document.addEventListener(\"keydown\", this.directionKeyPressed)\n  //   const canvas = document.getElementById(\"snake_board\")\n  //   const context = canvas.getContext(\"2d\")\n  //   this.setState({\n  //     context: context,\n  //     canvas: canvas\n  //   })\n  //   this.createFrog();\n  //   this.movingSlow();\n  // }\n  // componentWillUnmount() {\n  //   document.removeEventListener(\"keydown\", this.directionKeyPressed)\n  // }\n  // isNextStepAllowed(_nextDirection) {\n  //   const previousDirection = this.state.currentDirection\n  //   if (Math.abs(previousDirection.x) === Math.abs(_nextDirection.x)) {\n  //     return false\n  //   }\n  //   return true\n  // }\n  // directionKeyPressed = (e) => {\n  //   const { key } = this.state\n  //   let _nextDirection = {}\n  //   const keyPressed = e.keyCode\n  //   switch (keyPressed) {\n  //     case key.left:\n  //       _nextDirection = { x: -10, y: 0 }\n  //       if (this.isNextStepAllowed(_nextDirection)) {\n  //         this.setState({ currentDirection: _nextDirection })\n  //       }\n  //       break;\n  //     case key.up:\n  //       _nextDirection = { x: 0, y: -10 }\n  //       if (this.isNextStepAllowed(_nextDirection)) {\n  //         this.setState({ currentDirection: _nextDirection })\n  //       }\n  //       break;\n  //     case key.right:\n  //       _nextDirection = { x: 10, y: 0 }\n  //       if (this.isNextStepAllowed(_nextDirection)) {\n  //         this.setState({ currentDirection: _nextDirection })\n  //       }\n  //       break;\n  //     case key.down:\n  //       _nextDirection = { x: 0, y: 10 }\n  //       if (this.isNextStepAllowed(_nextDirection)) {\n  //         this.setState({ currentDirection: _nextDirection })\n  //       }\n  //       break;\n  //   }\n  // }\n  // movingSlow() {\n  //   const { currentDirection, frogPosition } = this.state;\n  //   setTimeout(() => {\n  //     this.clearCanvas();\n  //     this.justDraw(frogPosition, \"green\");\n  //     if (!this.didSnakeDie()) {\n  //       this.moveSnake(currentDirection);\n  //       this.drawSnake();\n  //       this.movingSlow()\n  //     } else {\n  //       this.drawSnake();\n  //       if (window.confirm(\"You lost with \" + this.state.score + \" point(s). Click ok to restart.\")) {\n  //         window.location.reload()\n  //       }\n  //     }\n\n  //   }, 300);\n  // }\n  // drawSnake() {\n  //   const { snake } = this.state\n  //   for (let i = 0; i < snake.length; i++) {\n  //     this.justDraw(snake[i], \"red\")\n  //   }\n  //   this.drawBoard();\n  // }\n  // clearCanvas() {\n  //   const { canvasWidth, canvasHeight, context } = this.state\n\n  //   if (context !== \"\") {\n  //     context.fillStyle = \"white\";\n  //     context.strokeStyle = \"black\";\n  //     context.fillRect(0, 0, canvasWidth, canvasHeight);\n  //     context.strokeRect(0, 0, canvasWidth, canvasHeight);\n  //   }\n  // }\n  // didSnakeDie() {\n  //   const { snake } = this.state\n  //   const head = { x: snake[0].x, y: snake[0].y }\n  //   for (let i = 4; i < snake.length; i++) {\n  //     if (snake[i].x === head.x && snake[i].y === head.y) {\n  //       return true\n  //     }\n  //   }\n  //   // if (didSnakeHitWall(head)) {\n  //   //   return true\n  //   // }\n\n  //   return false\n  // }\n  // didSnakeHitWall(coords) {\n  //   const { canvasHeight, canvasWidth } = this.state\n  //   if (coords.x === 0 || coords.x === canvasWidth - 10\n  //     || coords.y === 0 || coords.y === canvasHeight - 10) {\n  //     return true\n  //   }\n  // }\n  // getPosition(val, mod) {\n  //   return ((val % mod) + mod) % mod;\n  // }\n  // moveSnake(headTo) {\n  //   const { snake, frogPosition, canvasHeight, canvasWidth } = this.state;\n  //   const head = {\n  //     x: this.getPosition(snake[0].x + headTo.x, canvasWidth),\n  //     y: this.getPosition(snake[0].y + headTo.y, canvasHeight)\n  //   }\n  //   snake.unshift(head);\n  //   if (head.x === frogPosition.x && head.y === frogPosition.y) {\n  //     this.gainPoint()\n  //     this.createFrog();\n  //   }\n  //   else\n  //     snake.pop();\n  // }\n  // gainPoint() {\n  //   this.setState({\n  //     score: this.state.score + 1\n  //   })\n  // }\n  // createFrog() {\n  //   const { frogPosition, snake, canvasWidth, canvasHeight } = this.state\n\n  //   frogPosition.x = Math.round((Math.random() * (canvasWidth - 10)) / 10) * 10;\n  //   frogPosition.y = Math.round((Math.random() * (canvasHeight - 10)) / 10) * 10;\n\n  //   snake.forEach(function didSnakeEatFood(part) {\n  //     const isFrogEaten = part.x === frogPosition.x && part.y ===\n  //       frogPosition.y\n  //     if (isFrogEaten) {\n  //       console.log(\"ate\")\n  //       this.createFrog();\n  //     }\n  //   })\n  //   this.justDraw(frogPosition, \"green\");\n  //   this.drawBoard();\n  // }\n  // drawBoard() {\n  //   const canvas = document.getElementById(\"snake_board\"),\n  //     { canvasWidth, canvasHeight } = this.state,\n  //     p = 0\n\n  //   const context = canvas.getContext(\"2d\");\n  //   for (var x = 0; x <= canvasWidth; x += 10) {\n  //     context.moveTo(0.5 + x + p, p);\n  //     context.lineTo(0.5 + x + p, canvasHeight + p);\n  //   }\n\n  //   for (var y = 0; y <= canvasHeight; y += 10) {\n  //     context.moveTo(p, 0.5 + y + p);\n  //     context.lineTo(canvasWidth + p, 0.5 + y + p);\n  //   }\n  //   context.strokeStyle = \"grey\";\n  //   context.stroke();\n  // }\n\n  // justDraw(coords, fillColor) {\n  //   const { canvas } = this.state;\n  //   if (canvas.getContext) {\n  //     const context = canvas.getContext(\"2d\")\n  //     context.fillStyle = fillColor\n  //     context.fillRect(coords.x, coords.y, 10, 10)\n  //     context.strokeRect(coords.x, coords.y, 10, 10)\n  //   }\n  // }\n  render() {\n    return (\n\n      <div className=\"App\">\n        <header className=\"\">\n          Snake game\n        </header>\n        <SnakeGame />\n        {/* <canvas\n          style={{ border: \"1px solid black\" }}\n          id=\"snake_board\" width=\"300\" height=\"300\">\n        </canvas>\n        <aside>Score: {this.state.score}</aside> */}\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}