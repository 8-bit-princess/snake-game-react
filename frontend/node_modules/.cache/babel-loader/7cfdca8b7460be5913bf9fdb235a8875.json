{"ast":null,"code":"var _jsxFileName = \"/Users/thapasya/home/practice/testing/snake-game-react/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.directionKeyPressed = e => {\n      const key = this.state.key;\n      let _nextDirection = {};\n      const keyPressed = e.keyCode;\n\n      switch (keyPressed) {\n        case key.left:\n          _nextDirection = {\n            x: -10,\n            y: 0\n          };\n\n          if (this.isNextStepAllowed(_nextDirection)) {\n            this.setState({\n              currentDirection: _nextDirection\n            });\n          }\n\n          break;\n\n        case key.up:\n          _nextDirection = {\n            x: 0,\n            y: -10\n          };\n\n          if (this.isNextStepAllowed(_nextDirection)) {\n            this.setState({\n              currentDirection: _nextDirection\n            });\n          }\n\n          break;\n\n        case key.right:\n          _nextDirection = {\n            x: 10,\n            y: 0\n          };\n\n          if (this.isNextStepAllowed(_nextDirection)) {\n            this.setState({\n              currentDirection: _nextDirection\n            });\n          }\n\n          break;\n\n        case key.down:\n          _nextDirection = {\n            x: 0,\n            y: 10\n          };\n\n          if (this.isNextStepAllowed(_nextDirection)) {\n            this.setState({\n              currentDirection: _nextDirection\n            });\n          }\n\n          break;\n      }\n    };\n\n    this.state = {\n      canvasWidth: 300,\n      canvasHeight: 300,\n      key: {\n        left: 37,\n        up: 38,\n        right: 39,\n        down: 40\n      },\n      snake: [{\n        x: 150,\n        y: 150\n      }, {\n        x: 140,\n        y: 150\n      }, {\n        x: 130,\n        y: 150\n      }, {\n        x: 120,\n        y: 150\n      }],\n      currentDirection: {\n        x: -10,\n        y: 0\n      },\n      canvas: \"\",\n      frogPosition: {\n        x: 0,\n        y: 0\n      },\n      score: 0\n    };\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.directionKeyPressed);\n    const canvas = document.getElementById(\"snake_board\");\n    const context = canvas.getContext(\"2d\");\n    this.setState({\n      canvas: canvas\n    });\n    this.createFrog();\n    this.movingSlow();\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.directionKeyPressed);\n  }\n\n  isNextStepAllowed(_nextDirection) {\n    const previousDirection = this.state.currentDirection;\n\n    if (Math.abs(previousDirection.x) === Math.abs(_nextDirection.x)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  movingSlow() {\n    const _this$state = this.state,\n          currentDirection = _this$state.currentDirection,\n          frogPosition = _this$state.frogPosition;\n    setTimeout(() => {\n      this.clearCanvas();\n      this.justDraw(frogPosition, \"green\");\n\n      if (!this.didSnakeDie()) {\n        this.moveSnake(currentDirection);\n        this.drawSnake();\n        this.movingSlow();\n      } else {\n        this.drawSnake();\n\n        if (window.confirm(\"You lost with \" + this.state.score + \" point(s). Click ok to restart.\")) {\n          window.location.reload();\n        }\n      }\n    }, 300);\n  }\n\n  drawSnake() {\n    const snake = this.state.snake;\n\n    for (let i = 0; i < snake.length; i++) {\n      this.justDraw(snake[i], \"red\");\n    }\n\n    this.drawBoard();\n  }\n\n  clearCanvas() {\n    const _this$state2 = this.state,\n          canvasWidth = _this$state2.canvasWidth,\n          canvasHeight = _this$state2.canvasHeight,\n          context = _this$state2.context;\n\n    if (context !== \"\") {\n      context.fillStyle = \"white\";\n      context.strokeStyle = \"black\";\n      context.fillRect(0, 0, canvasWidth, canvasHeight);\n      context.strokeRect(0, 0, canvasWidth, canvasHeight);\n    }\n  }\n\n  didSnakeDie() {\n    const _this$state3 = this.state,\n          snake = _this$state3.snake,\n          canvasHeight = _this$state3.canvasHeight,\n          canvasWidth = _this$state3.canvasWidth;\n    const head = {\n      x: snake[0].x,\n      y: snake[0].y\n    };\n\n    for (let i = 4; i < snake.length; i++) {\n      if (snake[i].x === head.x && snake[i].y === head.y) {\n        return true;\n      }\n    }\n\n    if (head.x === 0 || head.x === canvasWidth - 10 || head.y === 0 || head.y === canvasHeight - 10) {\n      return true;\n    }\n\n    return false;\n  }\n\n  moveSnake(headTo) {\n    const _this$state4 = this.state,\n          snake = _this$state4.snake,\n          frogPosition = _this$state4.frogPosition;\n    const head = {\n      x: snake[0].x + headTo.x,\n      y: snake[0].y + headTo.y\n    };\n    snake.unshift(head);\n\n    if (head.x === frogPosition.x && head.y === frogPosition.y) {\n      this.gainPoint();\n      this.createFrog();\n    } else snake.pop();\n  }\n\n  gainPoint() {\n    this.setState({\n      score: this.state.score + 1\n    });\n  }\n\n  createFrog() {\n    const _this$state5 = this.state,\n          frogPosition = _this$state5.frogPosition,\n          snake = _this$state5.snake,\n          canvasWidth = _this$state5.canvasWidth,\n          canvasHeight = _this$state5.canvasHeight;\n    frogPosition.x = Math.round(Math.random() * (canvasWidth - 10) / 10) * 10;\n    frogPosition.y = Math.round(Math.random() * (canvasHeight - 10) / 10) * 10;\n    snake.forEach(function didSnakeEatFood(part) {\n      const isFrogEaten = part.x === frogPosition.x && part.y === frogPosition.y;\n\n      if (isFrogEaten) {\n        console.log(\"ate\");\n        this.createFrog();\n      }\n    });\n    this.justDraw(frogPosition, \"green\");\n    this.drawBoard();\n  }\n\n  drawBoard() {\n    const canvas = document.getElementById(\"snake_board\"),\n          _this$state6 = this.state,\n          canvasWidth = _this$state6.canvasWidth,\n          canvasHeight = _this$state6.canvasHeight,\n          p = 0;\n    const context = canvas.getContext(\"2d\");\n\n    for (var x = 0; x <= canvasWidth; x += 10) {\n      context.moveTo(0.5 + x + p, p);\n      context.lineTo(0.5 + x + p, canvasHeight + p);\n    }\n\n    for (var y = 0; y <= canvasHeight; y += 10) {\n      context.moveTo(p, 0.5 + y + p);\n      context.lineTo(canvasWidth + p, 0.5 + y + p);\n    }\n\n    context.strokeStyle = \"grey\";\n    context.stroke();\n  }\n\n  justDraw(coords, fillColor) {\n    const canvas = this.state.canvas;\n\n    if (canvas.getContext) {\n      const context = canvas.getContext(\"2d\");\n      context.fillStyle = fillColor;\n      context.fillRect(coords.x, coords.y, 10, 10);\n      context.strokeRect(coords.x, coords.y, 10, 10);\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, \"Snake game\"), React.createElement(\"canvas\", {\n      style: {\n        border: \"1px solid black\"\n      },\n      id: \"snake_board\",\n      width: \"300\",\n      height: \"300\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }), React.createElement(\"aside\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, \"Score: \", this.state.score));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/thapasya/home/practice/testing/snake-game-react/src/App.js"],"names":["React","Component","App","constructor","props","directionKeyPressed","e","key","state","_nextDirection","keyPressed","keyCode","left","x","y","isNextStepAllowed","setState","currentDirection","up","right","down","canvasWidth","canvasHeight","snake","canvas","frogPosition","score","componentDidMount","document","addEventListener","getElementById","context","getContext","createFrog","movingSlow","componentWillUnmount","removeEventListener","previousDirection","Math","abs","setTimeout","clearCanvas","justDraw","didSnakeDie","moveSnake","drawSnake","window","confirm","location","reload","i","length","drawBoard","fillStyle","strokeStyle","fillRect","strokeRect","head","headTo","unshift","gainPoint","pop","round","random","forEach","didSnakeEatFood","part","isFrogEaten","console","log","p","moveTo","lineTo","stroke","coords","fillColor","render","border"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      canvasWidth: 300,\n      canvasHeight: 300,\n      key: {\n        left: 37,\n        up: 38,\n        right: 39,\n        down: 40\n      },\n      snake: [\n        { x: 150, y: 150 },\n        { x: 140, y: 150 },\n        { x: 130, y: 150 },\n        { x: 120, y: 150 }\n      ],\n      currentDirection: {\n        x: -10,\n        y: 0\n      },\n\n      canvas: \"\",\n      frogPosition: {\n        x: 0,\n        y: 0\n      },\n      score: 0\n    }\n  }\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.directionKeyPressed)\n    const canvas = document.getElementById(\"snake_board\")\n    const context = canvas.getContext(\"2d\")\n    this.setState({\n      canvas: canvas\n    })\n    this.createFrog();\n    this.movingSlow();\n  }\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.directionKeyPressed)\n  }\n  isNextStepAllowed(_nextDirection) {\n    const previousDirection = this.state.currentDirection\n    if (Math.abs(previousDirection.x) === Math.abs(_nextDirection.x)) {\n      return false\n    }\n    return true\n  }\n  directionKeyPressed = (e) => {\n    const { key } = this.state\n    let _nextDirection = {}\n    const keyPressed = e.keyCode\n    switch (keyPressed) {\n      case key.left:\n        _nextDirection = { x: -10, y: 0 }\n        if (this.isNextStepAllowed(_nextDirection)) {\n          this.setState({ currentDirection: _nextDirection })\n        }\n        break;\n      case key.up:\n        _nextDirection = { x: 0, y: -10 }\n        if (this.isNextStepAllowed(_nextDirection)) {\n          this.setState({ currentDirection: _nextDirection })\n        }\n        break;\n      case key.right:\n        _nextDirection = { x: 10, y: 0 }\n        if (this.isNextStepAllowed(_nextDirection)) {\n          this.setState({ currentDirection: _nextDirection })\n        }\n        break;\n      case key.down:\n        _nextDirection = { x: 0, y: 10 }\n        if (this.isNextStepAllowed(_nextDirection)) {\n          this.setState({ currentDirection: _nextDirection })\n        }\n        break;\n    }\n  }\n  movingSlow() {\n    const { currentDirection, frogPosition } = this.state;\n    setTimeout(() => {\n      this.clearCanvas();\n      this.justDraw(frogPosition, \"green\");\n      if (!this.didSnakeDie()) {\n        this.moveSnake(currentDirection);\n        this.drawSnake();\n        this.movingSlow()\n      } else {\n        this.drawSnake();\n        if (window.confirm(\"You lost with \" + this.state.score + \" point(s). Click ok to restart.\")) {\n          window.location.reload()\n        }\n      }\n\n    }, 300);\n  }\n  drawSnake() {\n    const { snake } = this.state\n    for (let i = 0; i < snake.length; i++) {\n      this.justDraw(snake[i], \"red\")\n    }\n    this.drawBoard();\n  }\n  clearCanvas() {\n    const { canvasWidth, canvasHeight, context } = this.state\n\n    if (context !== \"\") {\n      context.fillStyle = \"white\";\n      context.strokeStyle = \"black\";\n      context.fillRect(0, 0, canvasWidth, canvasHeight);\n      context.strokeRect(0, 0, canvasWidth, canvasHeight);\n    }\n  }\n  didSnakeDie() {\n    const { snake, canvasHeight, canvasWidth } = this.state\n    const head = { x: snake[0].x, y: snake[0].y }\n    for (let i = 4; i < snake.length; i++) {\n      if (snake[i].x === head.x && snake[i].y === head.y) {\n        return true\n      }\n    }\n    if (head.x === 0 || head.x === canvasWidth - 10\n      || head.y === 0 || head.y === canvasHeight - 10) {\n      return true\n    }\n    return false\n  }\n  moveSnake(headTo) {\n    const { snake, frogPosition } = this.state;\n    const head = {\n      x: snake[0].x + headTo.x,\n      y: snake[0].y + headTo.y\n    }\n    snake.unshift(head);\n    if (head.x === frogPosition.x && head.y === frogPosition.y) {\n      this.gainPoint()\n      this.createFrog();\n    }\n    else\n      snake.pop();\n  }\n  gainPoint() {\n    this.setState({\n      score: this.state.score + 1\n    })\n  }\n  createFrog() {\n    const { frogPosition, snake, canvasWidth, canvasHeight } = this.state\n\n    frogPosition.x = Math.round((Math.random() * (canvasWidth - 10)) / 10) * 10;\n    frogPosition.y = Math.round((Math.random() * (canvasHeight - 10)) / 10) * 10;\n\n    snake.forEach(function didSnakeEatFood(part) {\n      const isFrogEaten = part.x === frogPosition.x && part.y ===\n        frogPosition.y\n      if (isFrogEaten) {\n        console.log(\"ate\")\n        this.createFrog();\n      }\n    })\n    this.justDraw(frogPosition, \"green\");\n    this.drawBoard();\n  }\n  drawBoard() {\n    const canvas = document.getElementById(\"snake_board\"),\n      { canvasWidth, canvasHeight } = this.state,\n      p = 0\n\n    const context = canvas.getContext(\"2d\");\n    for (var x = 0; x <= canvasWidth; x += 10) {\n      context.moveTo(0.5 + x + p, p);\n      context.lineTo(0.5 + x + p, canvasHeight + p);\n    }\n\n    for (var y = 0; y <= canvasHeight; y += 10) {\n      context.moveTo(p, 0.5 + y + p);\n      context.lineTo(canvasWidth + p, 0.5 + y + p);\n    }\n    context.strokeStyle = \"grey\";\n    context.stroke();\n  }\n\n  justDraw(coords, fillColor) {\n    const { canvas } = this.state;\n    if (canvas.getContext) {\n      const context = canvas.getContext(\"2d\")\n      context.fillStyle = fillColor\n      context.fillRect(coords.x, coords.y, 10, 10)\n      context.strokeRect(coords.x, coords.y, 10, 10)\n    }\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"\">\n          Snake game\n        </header>\n        <canvas\n          style={{ border: \"1px solid black\" }}\n          id=\"snake_board\" width=\"300\" height=\"300\">\n        </canvas>\n        <aside>Score: {this.state.score}</aside>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}