{"ast":null,"code":"var _jsxFileName = \"/Users/thapasya/home/practice/testing/snake-game-react/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.directionKeyPressed = e => {\n      const key = this.state.key;\n      let _nextDirection = {};\n      const keyPressed = e.keyCode;\n\n      switch (keyPressed) {\n        case key.left:\n          _nextDirection = {\n            x: -10,\n            y: 0\n          };\n\n          if (this.isNextStepAllowed(_nextDirection)) {\n            this.setState({\n              currentDirection: _nextDirection\n            });\n          }\n\n          break;\n\n        case key.up:\n          _nextDirection = {\n            x: 0,\n            y: -10\n          };\n\n          if (this.isNextStepAllowed(_nextDirection)) {\n            this.setState({\n              currentDirection: _nextDirection\n            });\n          }\n\n          break;\n\n        case key.right:\n          _nextDirection = {\n            x: 10,\n            y: 0\n          };\n\n          if (this.isNextStepAllowed(_nextDirection)) {\n            this.setState({\n              currentDirection: _nextDirection\n            });\n          }\n\n          break;\n\n        case key.down:\n          _nextDirection = {\n            x: 0,\n            y: 10\n          };\n\n          if (this.isNextStepAllowed(_nextDirection)) {\n            this.setState({\n              currentDirection: _nextDirection\n            });\n          }\n\n          break;\n      }\n    };\n\n    this.state = {\n      canvas: document.getElementById(\"snake_board\"),\n      key: {\n        left: 37,\n        up: 38,\n        right: 39,\n        down: 40\n      },\n      snake: [{\n        x: 150,\n        y: 150\n      }, {\n        x: 140,\n        y: 150\n      }, {\n        x: 130,\n        y: 150\n      }, {\n        x: 120,\n        y: 150\n      }],\n      currentDirection: {\n        x: -10,\n        y: 0\n      },\n      frogPosition: {\n        x: 0,\n        y: 0\n      }\n    };\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.directionKeyPressed);\n    this.createFrog();\n    this.movingSlow();\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.directionKeyPressed);\n  }\n\n  isNextStepAllowed(_nextDirection) {\n    const previousDirection = this.state.currentDirection;\n\n    if (Math.abs(previousDirection.x) === Math.abs(_nextDirection.x)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  movingSlow() {\n    const currentDirection = this.state.currentDirection;\n    setTimeout(() => {\n      this.clearCanvas();\n      this.drawFrog();\n      this.moveSnake(currentDirection);\n      this.drawSnake();\n      this.movingSlow();\n    }, 300);\n  }\n\n  drawSnake() {\n    const snake = this.state.snake;\n    snake.forEach(this.drawSnakePart);\n    this.drawBoard();\n  }\n\n  clearCanvas() {\n    const canvas = document.getElementById(\"snake_board\");\n    const ctx = canvas.getContext(\"2d\");\n    ctx.fillStyle = \"white\";\n    ctx.strokeStyle = \"black\";\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    ctx.strokeRect(0, 0, canvas.width, canvas.height);\n  }\n\n  moveSnake(headTo) {\n    const snake = this.state.snake;\n    const head = {\n      x: snake[0].x + headTo.x,\n      y: snake[0].y + headTo.y\n    };\n    snake.unshift(head);\n    snake.pop();\n  }\n\n  createFrog() {\n    let _frogPosition = this.state.frogPosition;\n    const snake = this.state.snake;\n    const canvas = document.getElementById(\"snake_board\");\n    _frogPosition.x = Math.round(Math.random() * (canvas.width - 10) / 10) * 10;\n    _frogPosition.y = Math.round(Math.random() * (canvas.height - 10) / 10) * 10;\n    this.setState({\n      frogPosition: _frogPosition\n    });\n    snake.forEach(function didSnakeEatFood(part) {\n      const isFrogEaten = part.x === _frogPosition.x && part.y === _frogPosition.y;\n\n      if (isFrogEaten) {\n        this.createFrog();\n      }\n    });\n    this.drawFrog();\n    this.drawBoard();\n  }\n\n  drawFrog() {\n    const frogPosition = this.state.frogPosition;\n    const canvas = document.getElementById(\"snake_board\");\n\n    if (canvas.getContext) {\n      const ctx = canvas.getContext(\"2d\");\n      ctx.fillStyle = 'green';\n      ctx.fillRect(frogPosition.x, frogPosition.y, 10, 10);\n      ctx.strokeRect(frogPosition.x, frogPosition.y, 10, 10);\n    }\n  }\n\n  drawBoard() {\n    const canvas = document.getElementById(\"snake_board\");\n    const bw = canvas.width,\n          bh = canvas.height,\n          p = 0;\n    const context = canvas.getContext(\"2d\");\n\n    for (var x = 0; x <= bw; x += 10) {\n      context.moveTo(0.5 + x + p, p);\n      context.lineTo(0.5 + x + p, bh + p);\n    }\n\n    for (var x = 0; x <= bh; x += 10) {\n      context.moveTo(p, 0.5 + x + p);\n      context.lineTo(bw + p, 0.5 + x + p);\n    }\n\n    context.strokeStyle = \"grey\";\n    context.stroke();\n  }\n\n  drawSnakePart(snakePart) {\n    const canvas = document.getElementById(\"snake_board\");\n\n    if (canvas.getContext) {\n      const ctx = canvas.getContext(\"2d\");\n      ctx.fillStyle = 'red';\n      ctx.fillRect(snakePart.x, snakePart.y, 10, 10);\n      ctx.strokeRect(snakePart.x, snakePart.y, 10, 10);\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, \"Snake game\"), React.createElement(\"canvas\", {\n      style: {\n        border: \"1px solid black\"\n      },\n      id: \"snake_board\",\n      width: \"300\",\n      height: \"300\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }), React.createElement(\"aside\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, \"Score: 0\"));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/thapasya/home/practice/testing/snake-game-react/src/App.js"],"names":["React","Component","App","constructor","props","directionKeyPressed","e","key","state","_nextDirection","keyPressed","keyCode","left","x","y","isNextStepAllowed","setState","currentDirection","up","right","down","canvas","document","getElementById","snake","frogPosition","componentDidMount","addEventListener","createFrog","movingSlow","componentWillUnmount","removeEventListener","previousDirection","Math","abs","setTimeout","clearCanvas","drawFrog","moveSnake","drawSnake","forEach","drawSnakePart","drawBoard","ctx","getContext","fillStyle","strokeStyle","fillRect","width","height","strokeRect","headTo","head","unshift","pop","_frogPosition","round","random","didSnakeEatFood","part","isFrogEaten","bw","bh","p","context","moveTo","lineTo","stroke","snakePart","render","border"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      canvas: document.getElementById(\"snake_board\"),\n      key: {\n        left: 37,\n        up: 38,\n        right: 39,\n        down: 40\n      },\n      snake: [\n        { x: 150, y: 150 },\n        { x: 140, y: 150 },\n        { x: 130, y: 150 },\n        { x: 120, y: 150 }\n      ],\n      currentDirection: {\n        x: -10,\n        y: 0\n      },\n      frogPosition: {\n        x: 0,\n        y: 0\n      }\n    }\n  }\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.directionKeyPressed)\n    this.createFrog();\n    this.movingSlow();\n  }\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.directionKeyPressed)\n  }\n  isNextStepAllowed(_nextDirection) {\n    const previousDirection = this.state.currentDirection\n    if (Math.abs(previousDirection.x) === Math.abs(_nextDirection.x)) {\n      return false\n    }\n    return true\n  }\n  directionKeyPressed = (e) => {\n    const { key } = this.state\n    let _nextDirection = {}\n    const keyPressed = e.keyCode\n    switch (keyPressed) {\n      case key.left:\n        _nextDirection = { x: -10, y: 0 }\n        if (this.isNextStepAllowed(_nextDirection)) {\n          this.setState({ currentDirection: _nextDirection })\n        }\n        break;\n      case key.up:\n        _nextDirection = { x: 0, y: -10 }\n        if (this.isNextStepAllowed(_nextDirection)) {\n          this.setState({ currentDirection: _nextDirection })\n        }\n        break;\n      case key.right:\n        _nextDirection = { x: 10, y: 0 }\n        if (this.isNextStepAllowed(_nextDirection)) {\n          this.setState({ currentDirection: _nextDirection })\n        }\n        break;\n      case key.down:\n        _nextDirection = { x: 0, y: 10 }\n        if (this.isNextStepAllowed(_nextDirection)) {\n          this.setState({ currentDirection: _nextDirection })\n        }\n        break;\n    }\n  }\n  movingSlow() {\n    const { currentDirection } = this.state;\n    setTimeout(() => {\n      this.clearCanvas();\n      this.drawFrog();\n      this.moveSnake(currentDirection);\n      this.drawSnake();\n      this.movingSlow()\n    }, 300);\n  }\n  drawSnake() {\n    const { snake } = this.state\n    snake.forEach(this.drawSnakePart);\n    this.drawBoard();\n  }\n  clearCanvas() {\n    const canvas = document.getElementById(\"snake_board\")\n    const ctx = canvas.getContext(\"2d\");\n    ctx.fillStyle = \"white\";\n    ctx.strokeStyle = \"black\";\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    ctx.strokeRect(0, 0, canvas.width, canvas.height);\n  }\n  moveSnake(headTo) {\n    const { snake } = this.state;\n    const head = {\n      x: snake[0].x + headTo.x,\n      y: snake[0].y + headTo.y\n    }\n    snake.unshift(head);\n    snake.pop();\n  }\n  createFrog() {\n    let _frogPosition = this.state.frogPosition\n    const { snake } = this.state\n    const canvas = document.getElementById(\"snake_board\")\n    _frogPosition.x = Math.round((Math.random() * (canvas.width - 10)) / 10) * 10;\n    _frogPosition.y = Math.round((Math.random() * (canvas.height - 10)) / 10) * 10;\n    this.setState({\n      frogPosition: _frogPosition\n    })\n    snake.forEach(function didSnakeEatFood(part) {\n      const isFrogEaten = part.x === _frogPosition.x && part.y ===\n        _frogPosition.y\n      if (isFrogEaten) {\n        this.createFrog();\n      }\n    })\n    this.drawFrog();\n    this.drawBoard();\n  }\n  drawFrog() {\n    const { frogPosition } = this.state;\n    const canvas = document.getElementById(\"snake_board\")\n    if (canvas.getContext) {\n      const ctx = canvas.getContext(\"2d\");\n      ctx.fillStyle = 'green'\n      ctx.fillRect(frogPosition.x, frogPosition.y, 10, 10)\n      ctx.strokeRect(frogPosition.x, frogPosition.y, 10, 10)\n    }\n\n  }\n  drawBoard() {\n    const canvas = document.getElementById(\"snake_board\")\n    const bw = canvas.width, bh = canvas.height, p = 0\n    const context = canvas.getContext(\"2d\");\n    for (var x = 0; x <= bw; x += 10) {\n      context.moveTo(0.5 + x + p, p);\n      context.lineTo(0.5 + x + p, bh + p);\n    }\n\n    for (var x = 0; x <= bh; x += 10) {\n      context.moveTo(p, 0.5 + x + p);\n      context.lineTo(bw + p, 0.5 + x + p);\n    }\n    context.strokeStyle = \"grey\";\n    context.stroke();\n  }\n\n  drawSnakePart(snakePart) {\n    const canvas = document.getElementById(\"snake_board\")\n    if (canvas.getContext) {\n      const ctx = canvas.getContext(\"2d\");\n      ctx.fillStyle = 'red'\n      ctx.fillRect(snakePart.x, snakePart.y, 10, 10)\n      ctx.strokeRect(snakePart.x, snakePart.y, 10, 10)\n    }\n  }\n  render() {\n\n    return (\n      <div className=\"App\">\n        <header className=\"\">\n          Snake game\n        </header>\n        <canvas\n          style={{ border: \"1px solid black\" }}\n          id=\"snake_board\" width=\"300\" height=\"300\">\n        </canvas>\n        <aside>Score: 0</aside>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}