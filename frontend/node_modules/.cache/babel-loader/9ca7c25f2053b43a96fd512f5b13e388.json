{"ast":null,"code":"var _jsxFileName = \"/Users/thapasya/home/practice/testing/snake-game-react/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.directionKeyPressed = e => {\n      const key = this.state.key;\n      let _nextDirection = {};\n      const keyPressed = e.keyCode;\n\n      switch (keyPressed) {\n        case key.left:\n          _nextDirection = {\n            x: -10,\n            y: 0\n          };\n\n          if (this.isNextStepAllowed(_nextDirection)) {\n            this.setState({\n              currentDirection: _nextDirection\n            });\n          }\n\n          break;\n\n        case key.up:\n          _nextDirection = {\n            x: 0,\n            y: -10\n          };\n\n          if (this.isNextStepAllowed(_nextDirection)) {\n            this.setState({\n              currentDirection: _nextDirection\n            });\n          }\n\n          break;\n\n        case key.right:\n          _nextDirection = {\n            x: 10,\n            y: 0\n          };\n\n          if (this.isNextStepAllowed(_nextDirection)) {\n            this.setState({\n              currentDirection: _nextDirection\n            });\n          }\n\n          break;\n\n        case key.down:\n          _nextDirection = {\n            x: 0,\n            y: 10\n          };\n\n          if (this.isNextStepAllowed(_nextDirection)) {\n            this.setState({\n              currentDirection: _nextDirection\n            });\n          }\n\n          break;\n      }\n    };\n\n    this.state = {\n      canvas: document.getElementById(\"snake_board\"),\n      key: {\n        left: 37,\n        up: 38,\n        right: 39,\n        down: 40\n      },\n      snake: [{\n        x: 150,\n        y: 150\n      }, {\n        x: 140,\n        y: 150\n      }, {\n        x: 130,\n        y: 150\n      }, {\n        x: 120,\n        y: 150\n      }],\n      currentDirection: {\n        x: -10,\n        y: 0\n      }\n    };\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.directionKeyPressed);\n    this.createFrog();\n    this.movingSlow();\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.directionKeyPressed);\n  }\n\n  isNextStepAllowed(_nextDirection) {\n    const previousDirection = this.state.currentDirection;\n\n    if (Math.abs(previousDirection.x) === Math.abs(_nextDirection.x)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  movingSlow() {\n    const _this$state = this.state,\n          snake = _this$state.snake,\n          currentDirection = _this$state.currentDirection;\n    setTimeout(() => {\n      this.clearCanvas();\n      this.drawFrog();\n      this.moveSnake(currentDirection);\n      this.drawSnake();\n      this.movingSlow();\n    }, 100);\n  }\n\n  drawSnake() {\n    const snake = this.state.snake;\n    snake.forEach(this.drawSnake);\n  }\n\n  clearCanvas() {\n    const canvas = document.getElementById(\"snake_board\");\n    const ctx = canvas.getContext(\"2d\");\n    ctx.fillStyle = \"white\";\n    ctx.strokeStyle = \"black\";\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    ctx.strokeRect(0, 0, canvas.width, canvas.height);\n  }\n\n  moveSnake(headTo) {\n    const snake = this.state.snake;\n    const head = {\n      x: snake[0].x + headTo.x,\n      y: snake[0].y + headTo.y\n    };\n    snake.unshift(head);\n    snake.pop();\n  }\n\n  createFrog() {\n    let frogPosition = {};\n    const snake = this.state.snake;\n    const canvas = document.getElementById(\"snake_board\");\n    frogPosition.x = Math.floor(Math.random() * (canvas.width - 10) + 0);\n    frogPosition.y = Math.floor(Math.random() * (canvas.height - 10) + 0);\n    snake.forEach(function didSnakeEatFood(part) {\n      const isFrogEaten = part.x === frogPosition.x && part.y === frogPosition.y;\n\n      if (isFrogEaten) {\n        this.createFrog();\n      }\n    });\n    this.drawFrog(frogPosition);\n  }\n\n  drawFrog(frogPart) {\n    const canvas = document.getElementById(\"snake_board\");\n\n    if (canvas.getContext) {\n      const ctx = canvas.getContext(\"2d\");\n      ctx.fillStyle = 'green';\n      ctx.fillRect(frogPart.x, frogPart.y, 10, 10);\n      ctx.strokeRect(frogPart.x, frogPart.y, 10, 10);\n    }\n  }\n\n  drawSnake(snakePart) {\n    const canvas = document.getElementById(\"snake_board\");\n\n    if (canvas.getContext) {\n      const ctx = canvas.getContext(\"2d\");\n      ctx.fillStyle = 'red';\n      ctx.fillRect(snakePart.x, snakePart.y, 10, 10);\n      ctx.strokeRect(snakePart.x, snakePart.y, 10, 10);\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"Snake game\"), React.createElement(\"canvas\", {\n      style: {\n        border: \"1px solid black\"\n      },\n      id: \"snake_board\",\n      width: \"300\",\n      height: \"300\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }), React.createElement(\"aside\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \"Score: 0\"));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/thapasya/home/practice/testing/snake-game-react/src/App.js"],"names":["React","Component","App","constructor","props","directionKeyPressed","e","key","state","_nextDirection","keyPressed","keyCode","left","x","y","isNextStepAllowed","setState","currentDirection","up","right","down","canvas","document","getElementById","snake","componentDidMount","addEventListener","createFrog","movingSlow","componentWillUnmount","removeEventListener","previousDirection","Math","abs","setTimeout","clearCanvas","drawFrog","moveSnake","drawSnake","forEach","ctx","getContext","fillStyle","strokeStyle","fillRect","width","height","strokeRect","headTo","head","unshift","pop","frogPosition","floor","random","didSnakeEatFood","part","isFrogEaten","frogPart","snakePart","render","border"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      canvas: document.getElementById(\"snake_board\"),\n      key: {\n        left: 37,\n        up: 38,\n        right: 39,\n        down: 40\n      },\n      snake: [\n        { x: 150, y: 150 },\n        { x: 140, y: 150 },\n        { x: 130, y: 150 },\n        { x: 120, y: 150 }\n      ],\n      currentDirection: {\n        x: -10,\n        y: 0\n      }\n    }\n  }\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.directionKeyPressed)\n    this.createFrog();\n    this.movingSlow();\n  }\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.directionKeyPressed)\n  }\n  isNextStepAllowed(_nextDirection) {\n    const previousDirection = this.state.currentDirection\n    if (Math.abs(previousDirection.x) === Math.abs(_nextDirection.x)) {\n      return false\n    }\n    return true\n  }\n  directionKeyPressed = (e) => {\n    const { key } = this.state\n    let _nextDirection = {}\n    const keyPressed = e.keyCode\n    switch (keyPressed) {\n      case key.left:\n        _nextDirection = { x: -10, y: 0 }\n        if (this.isNextStepAllowed(_nextDirection)) {\n          this.setState({ currentDirection: _nextDirection })\n        }\n        break;\n      case key.up:\n        _nextDirection = { x: 0, y: -10 }\n        if (this.isNextStepAllowed(_nextDirection)) {\n          this.setState({ currentDirection: _nextDirection })\n        }\n        break;\n      case key.right:\n        _nextDirection = { x: 10, y: 0 }\n        if (this.isNextStepAllowed(_nextDirection)) {\n          this.setState({ currentDirection: _nextDirection })\n        }\n        break;\n      case key.down:\n        _nextDirection = { x: 0, y: 10 }\n        if (this.isNextStepAllowed(_nextDirection)) {\n          this.setState({ currentDirection: _nextDirection })\n        }\n        break;\n    }\n  }\n  movingSlow() {\n    const { snake, currentDirection } = this.state;\n    setTimeout(() => {\n      this.clearCanvas();\n      this.drawFrog();\n      this.moveSnake(currentDirection);\n      this.drawSnake();\n      this.movingSlow()\n    }, 100);\n  }\n  drawSnake() {\n    const { snake } = this.state\n    snake.forEach(this.drawSnake);\n  }\n  clearCanvas() {\n    const canvas = document.getElementById(\"snake_board\")\n    const ctx = canvas.getContext(\"2d\");\n    ctx.fillStyle = \"white\";\n    ctx.strokeStyle = \"black\";\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    ctx.strokeRect(0, 0, canvas.width, canvas.height);\n  }\n  moveSnake(headTo) {\n    const { snake } = this.state;\n    const head = {\n      x: snake[0].x + headTo.x,\n      y: snake[0].y + headTo.y\n    }\n    snake.unshift(head);\n    snake.pop();\n  }\n  createFrog() {\n    let frogPosition = {}\n    const { snake } = this.state\n    const canvas = document.getElementById(\"snake_board\")\n    frogPosition.x = Math.floor((Math.random() * (canvas.width - 10)) + 0);\n    frogPosition.y = Math.floor((Math.random() * (canvas.height - 10)) + 0);\n    snake.forEach(function didSnakeEatFood(part) {\n      const isFrogEaten = part.x === frogPosition.x && part.y === frogPosition.y\n      if (isFrogEaten) {\n        this.createFrog();\n      }\n    })\n    this.drawFrog(frogPosition)\n  }\n  drawFrog(frogPart) {\n    const canvas = document.getElementById(\"snake_board\")\n    if (canvas.getContext) {\n      const ctx = canvas.getContext(\"2d\");\n      ctx.fillStyle = 'green'\n      ctx.fillRect(frogPart.x, frogPart.y, 10, 10)\n      ctx.strokeRect(frogPart.x, frogPart.y, 10, 10)\n    }\n  }\n  drawSnake(snakePart) {\n    const canvas = document.getElementById(\"snake_board\")\n    if (canvas.getContext) {\n      const ctx = canvas.getContext(\"2d\");\n      ctx.fillStyle = 'red'\n      ctx.fillRect(snakePart.x, snakePart.y, 10, 10)\n      ctx.strokeRect(snakePart.x, snakePart.y, 10, 10)\n    }\n  }\n  render() {\n\n    return (\n      <div className=\"App\">\n        <header className=\"\">\n          Snake game\n        </header>\n        <canvas\n          style={{ border: \"1px solid black\" }}\n          id=\"snake_board\" width=\"300\" height=\"300\">\n        </canvas>\n        <aside>Score: 0</aside>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}